{"version":3,"file":"static/js/746.7ad32d6a.chunk.js","mappings":"oOACA,EAAuB,wBAAvB,EAAuD,yBAAvD,EAAsF,uB,SC6BtF,EA3BkB,SAAC,GAAoB,IAAnBA,EAAkB,EAAlBA,aAChB,GAA0BC,EAAAA,EAAAA,UAAS,IAAnC,eAAOC,EAAP,KAAcC,EAAd,KAYA,OACI,kBAAMC,UAAWC,EAAUC,SAPV,SAACC,GAClBA,EAAIC,iBACJR,EAAaE,GACbC,EAAS,GACZ,EAGG,WACI,kBAAOC,UAAWC,EAAWI,KAAK,OAC9BC,aAAa,MACbC,WAAS,EACTC,YAAY,kBACZC,SAhBS,SAACN,GAClBJ,EAAUI,EAAIO,OAAOZ,MACxB,EAeWA,MAAOA,KAEX,mBAAQE,UAAWC,EAASI,KAAK,SAAjC,SAA0C,aAGrD,E,4CC3BD,EAA4B,0BC8D5B,EApDe,WAEX,OAA8BR,EAAAA,EAAAA,UAAS,MAAvC,eAAOc,EAAP,KAAgBC,EAAhB,KACA,GAA4Bf,EAAAA,EAAAA,UAASgB,EAAAA,EAAAA,MAArC,eAAOC,EAAP,KAAeC,EAAf,KAEA,GAAwCC,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMC,EAAQF,EAAaG,IAAI,UAE/BC,EAAAA,EAAAA,YAAU,WAAM,wCAKZ,oGAEQN,EAAUF,EAAAA,EAAAA,SAFlB,UAG+BS,EAAAA,EAAAA,IAAiBH,GAHhD,QAGeI,EAHf,QAKWZ,QAAQa,OAAS,GAChBT,EAAUF,EAAAA,EAAAA,UACVD,EAAWW,EAAOZ,UAElBC,EAAW,IATvB,gDAYQG,EAAUF,EAAAA,EAAAA,UAZlB,0DALY,sBACPM,GADO,mCAoBRM,EAEP,GAAE,CAACN,IAYJ,OAAQ,iBAAKnB,UAAWC,EAAhB,WACJ,SAAC,EAAD,CAAWL,aAXM,SAACuB,GAChBD,EAAgB,CAAEC,MAAAA,GACvB,IAUIL,IAAWD,EAAAA,EAAAA,UAAkB,SAACa,EAAA,EAAD,KAC9B,SAACC,EAAA,EAAD,CAAYJ,OAAQZ,MAI3B,C","sources":["webpack://goit-react-hw-05-movies/./src/components/SearchBar/SearchBar.module.css?35a0","components/SearchBar/SearchBar.jsx","webpack://goit-react-hw-05-movies/./src/components/pages/Movies/Movies.module.css?078c","components/pages/Movies/Movies.jsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"form\":\"SearchBar_form__gW7Gj\",\"input\":\"SearchBar_input__bIy50\",\"btn\":\"SearchBar_btn__PKGSc\"};","import { useState } from \"react\";\nimport css from './SearchBar.module.css';\n\nconst SearchBar = ({handleSearch}) => {\n    const [value, setValue] = useState('');\n\n    const handleChange = (evt) => {\n        setValue( evt.target.value );\n    };\n    \n    const handleSubmit = (evt) => {\n        evt.preventDefault();\n        handleSearch(value);\n        setValue('');\n    };\n\n    return (\n        <form className={css.form} onSubmit={handleSubmit}>\n            <input className={css.input} type=\"text\"\n                autoComplete=\"off\"\n                autoFocus\n                placeholder=\"Search movie...\"\n                onChange={handleChange}\n                value={value}\n            />\n            <button className={css.btn} type=\"submit\">Search</button>\n        </form>\n    );\n}\n \nexport default SearchBar;","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"Movies_container__2yt7S\"};","import SearchBar from \"components/SearchBar/SearchBar\";\nimport { fetchSearchMovie } from \"components/services/fetchMovies\";\nimport { useEffect, useState } from \"react\";\nimport { STATUS } from \"../../services/status\";\nimport { useSearchParams } from \"react-router-dom\";\nimport Loader from \"components/Loader/Loader\";\nimport MoviesList from \"components/MoviesList/MoviesList\";\nimport css from './Movies.module.css';\n// import LoadMore from \"components/Button/Button\";\n\n\nconst Movies = () => {\n    \n    const [results, setResults] = useState(null);\n    const [status, setStatus] = useState(STATUS.IDLE);\n    // const [page, setPage] = useState(1);\n    const [searchParams, setSearchParams] = useSearchParams();\n\n    const query = searchParams.get(\"query\");\n\n    useEffect(() => {\n        if (!query) {\n            return;\n        };\n        \n        async function getMovies() {\n            try {\n                setStatus(STATUS.PENDING);\n                const  movies  = await fetchSearchMovie(query);\n\n        if (movies.results.length > 0) {\n                    setStatus(STATUS.RESOLVED);\n                    setResults(movies.results);\n                } else {\n                    setResults([]);\n                }\n            } catch (err) {\n                setStatus(STATUS.REJECTED)\n            }\n        };\n            getMovies();\n           \n    }, [query])\n\n    const handleSearch = (query) => {\n          setSearchParams({ query});\n    };\n    \n    // const onNextPage = () => {\n    // setPage(prevPage => (prevPage + 1));\n    // };\n    \n    // const showButton = status === STATUS.RESOLVED;\n    \n    return (<div className={css.container}>\n        <SearchBar handleSearch={handleSearch} />\n        {status === STATUS.PENDING && <Loader />}\n        <MoviesList movies={results} />\n    \n        {/* {showButton && <LoadMore onClick={onNextPage} />} */}\n    </div> );\n}\n \nexport default Movies;\n\n\n// const Movies = () => {\n    \n//     const [searchParams, setSearchParams] = useSearchParams();\n//     const [searchQuery, setSearchQuery] = useState(searchParams.get('query'));\n//     const [movies, setMovies] = useState([]);\n//     const [status, setStatus] = useState(STATUS.IDLE);\n//     const [page, setPage] = useState(1);\n//     // const prevSearchQuery = usePrevious(searchQuery);\n\n//     // const query = searchParams.get(\"query\");\n//     // const currentPage = Number(searchParams.get(\"page\"));\n\n//     // const queryRef = useRef(searchQuery);\n\n//     useEffect((prevPage) => {\n//         if (!searchQuery) {\n//             return;\n//         };\n        \n//         // if (searchQuery !== queryRef.current) {\n//         //     queryRef.current = searchQuery;\n//         // };\n\n//         const getMovies = async () => {\n//             try {\n//                 setStatus(STATUS.PENDING);\n//                 const  movies  = await fetchSearchMovie(searchQuery);\n\n//         if (movies.results.length > 0) {\n//                     setStatus(STATUS.RESOLVED);\n//                     setMovies(movies.results);\n//                     // setTotalPages(movies.total_pages);\n//                 } else {\n//                     // setStatus('nothing');\n//                     setMovies([]);\n//                     // setTotalPages(0);\n//                 }\n//             } catch (err) {\n//                 setStatus(STATUS.REJECTED)\n//             }\n//         };\n//         if (prevPage !== page) {\n//             getMovies();\n//         };\n        \n//     }, [searchQuery, movies, page])\n\n//       const handleSearch = (movies) => {\n//           if (!movies) {\n//         <p>Field is empty</p>\n//     //   Notify.failure('Field is empty');\n//     //   return;\n//     }\n//     setSearchParams({ query: searchQuery });\n//     setSearchQuery(searchQuery);\n//     setMovies([]);\n//     // setTotalPages(0);\n//     };\n\n//     const onNextPage = () => {\n//     setPage(prevPage => (prevPage + 1));\n//     };\n\n//     const showButton = status === STATUS.RESOLVED;\n    \n//     return (<div>\n//         <SearchBar handleSearch={handleSearch} />\n//         {status === STATUS.PENDING && <Loader />}\n//         {movies.length > 0 && <MoviesList movies={movies} />}\n//         {showButton && <LoadMore onClick={onNextPage} />}\n//     </div> );\n// }\n \n// export default Movies;"],"names":["handleSearch","useState","value","setValue","className","css","onSubmit","evt","preventDefault","type","autoComplete","autoFocus","placeholder","onChange","target","results","setResults","STATUS","status","setStatus","useSearchParams","searchParams","setSearchParams","query","get","useEffect","fetchSearchMovie","movies","length","getMovies","Loader","MoviesList"],"sourceRoot":""}